<main class="bg-gray-100 min-h-screen py-10 px-4">
  <div class="max-w-3xl mx-auto bg-white p-8 rounded-2xl shadow-lg border border-gray-200 relative overflow-hidden space-y-6">

    <!-- Franja superior sutil (match vista proveedores/crear) -->
    <div class="absolute inset-x-0 top-0 h-1 bg-gradient-to-r from-indigo-500/70 via-sky-500/70 to-emerald-500/70"></div>

    <!-- Header con volver + eliminar -->
    <header class="flex items-start justify-between gap-4">
      <div>
        <h1 class="text-2xl font-bold text-gray-900 tracking-tight">Editar Plan</h1>
        <p class="text-sm text-gray-600">Actualizá el nombre, el detalle y el importe (USD).</p>
      </div>

      <div class="flex items-center gap-2">
        <a href="/planes"
           class="inline-flex items-center gap-1.5 px-3 py-1.5 rounded-lg text-sm text-gray-700 hover:text-gray-900 ring-1 ring-gray-200 hover:ring-gray-300 bg-white">
          ← Volver
        </a>

        <% if (usuario?.modulosPermitidos?.planes?.eliminar) { %>
          <!-- Form de eliminar separado del principal (sin anidación) -->
          <form action="/planes/<%= datos._id %>/eliminar" method="POST"
                onsubmit="return confirm('¿Eliminar plan? Esta acción no se puede deshacer.');">
            <button type="submit"
                    class="inline-flex items-center gap-1.5 px-3 py-1.5 rounded-lg text-sm text-red-700 ring-1 ring-red-200 hover:bg-red-50 hover:ring-red-300 transition">
              Eliminar
            </button>
          </form>
        <% } %>
      </div>
    </header>

    <% if (errores && errores.length) { %>
      <div class="bg-red-50 border border-red-300 text-red-800 px-5 py-4 rounded-lg shadow-sm text-sm">
        <h2 class="font-semibold mb-2">Por favor corregí los siguientes errores:</h2>
        <ul class="list-disc pl-6 space-y-1">
          <% errores.forEach(e => { %><li><%= e.msg %></li><% }) %>
        </ul>
      </div>
    <% } %>

    <!-- FORM PRINCIPAL: EDITAR -->
    <form action="/planes/<%= datos._id %>/editar" method="POST" class="space-y-6" id="formEditarPlan">
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">

        <!-- Nombre -->
        <div class="sm:col-span-2">
          <label for="nombrePlan" class="block font-medium text-gray-800">Nombre del plan</label>
          <input
            type="text"
            name="nombre"
            id="nombrePlan"
            required
            maxlength="27"
            value="<%= (datos.nombre || '') %>"
            class="w-full border border-gray-300 px-3 py-2 rounded-lg text-sm tracking-wide focus:outline-none focus:ring-2 focus:ring-indigo-500/30"
            aria-describedby="nombreHelp nombreCount"
            style="text-transform: uppercase"
          >
          <div class="flex items-center justify-between mt-1">
            <p id="nombreHelp" class="text-xs text-gray-500">
              Debe tener entre
              <span class="font-medium">20 y 27 caracteres</span> (incluye espacios).
            </p>
            <p id="nombreCount" class="text-xs text-gray-500">0 / 27</p>
          </div>
          <p id="nombreError" class="hidden mt-1 text-xs text-red-600">El nombre debe tener entre 20 y 27 caracteres.</p>
        </div>

        <!-- Detalle -->
        <div class="sm:col-span-2">
          <label class="block font-medium text-gray-800">Detalle</label>
          <textarea name="detalle" rows="3"
                    class="w-full border border-gray-300 px-3 py-2 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500/30"><%= datos.detalle || '' %></textarea>
        </div>

        <!-- Importe (columna izquierda) -->
        <div class="sm:col-span-2 md:col-span-1">
          <label class="block font-medium text-gray-800">Importe (USD)</label>
          <div class="relative">
            <span class="absolute inset-y-0 left-3 flex items-center pointer-events-none text-gray-500">US$</span>
            <input type="text" id="importeMask" inputmode="numeric" autocomplete="off"
                   class="w-full border border-gray-300 pl-10 pr-3 py-2 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500/30"
                   placeholder="0,00" aria-describedby="importeHelp">
          </div>
          <!-- hidden que se envía al backend -->
          <input type="hidden" name="importe" id="importeHidden"
                 value="<%= (typeof datos.importe !== 'undefined' && datos.importe !== null) ? Number(datos.importe).toFixed(2) : '' %>">

          <p id="importeHelp" class="text-xs text-gray-500 mt-1">
            Mostrado con separador local (<span class="font-mono">12.345,67</span>). Se envía con punto decimal.
          </p>
        </div>

        <!-- Activo (misma línea que Importe, sin cambiar tamaño del checkbox) -->
        <div class="sm:col-span-2 md:col-span-1 self-end">
          <label for="chk-activo" class="inline-flex items-center gap-2">
            <input id="chk-activo" type="checkbox" name="activo" value="true"
                   <%= (datos.activo ?? true) ? 'checked' : '' %>>
            <span class="text-gray-700 select-none">Activo</span>
          </label>
        </div>

      </div>

      <!-- Footer botones: Guardar / Cancelar (ordenados) -->
      <div class="flex flex-col sm:flex-row sm:justify-end gap-2 pt-2">
        <button type="submit" id="btnSubmit"
                class="inline-flex items-center gap-1.5 bg-indigo-600 text-white px-6 py-2 rounded-lg hover:bg-indigo-700 transition shadow-sm ring-1 ring-indigo-500/10 disabled:opacity-50 disabled:cursor-not-allowed">
          Guardar
        </button>
        <a href="/planes" class="inline-flex items-center gap-1.5 bg-gray-100 text-gray-800 px-6 py-2 rounded-lg hover:bg-gray-200 transition ring-1 ring-gray-200">
          Cancelar
        </a>
      </div>
    </form>

  </div>
</main>

<script>
/* ==============================
   Nombre (MAYÚSCULAS, 20–27 chars)
   ============================== */
(function () {
  var MIN_LEN = 20;
  var MAX_LEN = 27;

  var form    = document.getElementById('formEditarPlan');
  var input   = document.getElementById('nombrePlan');
  var counter = document.getElementById('nombreCount');
  var errorEl = document.getElementById('nombreError');
  var submit  = document.getElementById('btnSubmit');

  function normalize() {
    var v = (input.value || '')
      .toUpperCase()
      .replace(/\r?\n/g, ' ')
      .replace(/\s+/g, ' ')
      .trimStart();

    if (v.length > MAX_LEN) v = v.slice(0, MAX_LEN);
    input.value = v;

    counter.textContent = v.length + ' / ' + MAX_LEN;

    var ok = (v.length >= MIN_LEN && v.length <= MAX_LEN);
    if (ok) {
      errorEl.classList.add('hidden');
      input.classList.remove('border-red-400', 'focus:border-red-500', 'focus:ring-red-200');
    }
    if (submit) submit.disabled = !ok;
  }

  // Inicial
  normalize();
  input.addEventListener('input', normalize);
  input.addEventListener('blur', normalize);

  // Validación en submit (doble seguro)
  form.addEventListener('submit', function (e) {
    normalize();
    var len = (input.value || '').length;
    if (len < MIN_LEN || len > MAX_LEN) {
      e.preventDefault();
      errorEl.classList.remove('hidden');
      input.classList.add('border-red-400', 'focus:border-red-500', 'focus:ring-red-200');
      input.focus();
    }
  });
})();

/* ==========================
   Importe con máscara USD
   ========================== */
(() => {
  const input = document.getElementById('importeMask');
  const hidden = document.getElementById('importeHidden');

  // Modelo interno
  let intDigits = "";           // parte entera, solo dígitos
  let decDigits = ["0","0"];    // dos dígitos decimales
  let editingDecimals = false;  // true si estamos editando decimales
  let decPos = 0;               // 0..2 cuántos decimales ya ingresados

  // Inicializar desde hidden si viniera con valor
  (function initFromHidden() {
    const v = hidden.value;
    if (!v) { render(); return; }
    const n = Number(v);
    if (Number.isFinite(n)) {
      const entero = Math.trunc(Math.abs(n)).toString();
      const dec = Math.round((Math.abs(n) % 1) * 100).toString().padStart(2, "0");
      intDigits = entero.replace(/^0+(?=\d)/, '');
      decDigits = [dec[0], dec[1]];
    }
    render();
  })();

  // Helpers
  function fmtThousands(s) {
    s = s || "0";
    s = s.replace(/^0+(?=\d)/, "");
    if (s === "") s = "0";
    return s.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
  }
  function updateHidden() {
    const num = Number(intDigits || "0") + (Number(decDigits.join("")) / 100);
    hidden.value = num.toFixed(2);
  }
  function render() {
    const visible = `${fmtThousands(intDigits)},${decDigits.join("")}`;
    input.value = visible;

    // Caret inteligente
    requestAnimationFrame(() => {
      const commaIndex = visible.indexOf(",");
      let pos = editingDecimals ? (commaIndex + 1 + decPos) : commaIndex;
      pos = Math.max(0, Math.min(visible.length, pos));
      input.setSelectionRange(pos, pos);
    });

    updateHidden();
  }

  // Sanitiza pegado: acepta 12.345,67 | 12345,67 | 12345.67 | 12345
  function parseAnyNumberLike(str) {
    let s = (str || "").trim();
    if (!s) return null;
    const lastComma = s.lastIndexOf(',');
       const lastDot = s.lastIndexOf('.');
    let decSep = null;
    if (lastComma > -1 || lastDot > -1) decSep = (lastComma > lastDot) ? ',' : '.';
    if (decSep === ',') { s = s.replace(/\./g, ''); s = s.replace(',', '.'); }
    else if (decSep === '.') { s = s.replace(/,/g, ''); }
    else { s = s.replace(/[.,\s]/g, ''); }
    const n = Number(s);
    return Number.isFinite(n) && n >= 0 ? n : null;
  }

  // beforeinput: control total
  input.addEventListener('beforeinput', (e) => {
    const type = e.inputType;
    const data = e.data;

    // Insertar dígito
    if (type === 'insertText' && /[0-9]/.test(data || "")) {
      if (editingDecimals) {
        if (decPos < 2) { decDigits[decPos] = data; decPos++; }
        else { decPos = 0; decDigits[decPos] = data; decPos = 1; }
      } else {
        intDigits += data;
        intDigits = intDigits.replace(/^0+(?=\d)/, '');
      }
      e.preventDefault(); render(); return;
    }

    // Punto o coma -> entrar a decimales
    if (type === 'insertText' && (data === '.' || data === ',')) {
      editingDecimals = true; decPos = 0;
      e.preventDefault(); render(); return;
    }

    // Backspace
    if (type === 'deleteContentBackward') {
      e.preventDefault();
      if (editingDecimals) {
        if (decPos > 0) { decPos--; decDigits[decPos] = "0"; }
        else { editingDecimals = false; }
      } else {
        if (intDigits.length > 0) intDigits = intDigits.slice(0,  -1);
      }
      render(); return;
    }

    // Pegado
    if (type === 'insertFromPaste') {
      e.preventDefault();
      navigator.clipboard.readText().then(text => {
        const n = parseAnyNumberLike(text);
        if (n === null) return;
        const entero = Math.trunc(n).toString();
        const dec = Math.round((n % 1) * 100).toString().padStart(2, "0");
        intDigits = entero.replace(/^0+(?=\d)/, '');
        decDigits = [dec[0], dec[1]];
        editingDecimals = false; decPos = 0;
        render();
      }).catch(() => {});
      return;
    }

    // Bloquear cualquier otra edición directa
    e.preventDefault();
  });

  // Click: posicionar el caret donde conviene
  input.addEventListener('click', () => {
    const visible = input.value;
    const commaIndex = visible.indexOf(",");
    const caret = input.selectionStart || 0;

    // Si está en "0,00", ir a entero
    const isInitialZero = (fmtThousands(intDigits) === "0" && decDigits.join("") === "00");
    if (isInitialZero) { editingDecimals = false; decPos = 0; render(); return; }

    if (caret > commaIndex) {
      // clic en decimales
      editingDecimals = true;
      const after = caret - (commaIndex + 1);
      decPos = Math.max(0, Math.min(2, after));
      if (decPos >= 2) decPos = 1; // no quede al final sin escribir
    } else {
      // clic en entero
      editingDecimals = false; decPos = 0;
    }
    render();
  });

  // Focus: si no hay valor, mostrar 0,00 y ubicar caret en entero
  input.addEventListener('focus', () => {
    if (!input.value) { editingDecimals = false; decPos = 0; render(); }
    else { input.dispatchEvent(new Event('click')); }
  });

  // Evitar letras
  input.addEventListener('keypress', (e) => {
    const ch = e.key;
    if (!/[0-9.,]/.test(ch)) e.preventDefault();
  });

})();
</script>
