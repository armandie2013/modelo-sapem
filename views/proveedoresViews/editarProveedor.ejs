<main class="bg-gray-100 min-h-screen py-10 px-4">
  <div class="max-w-4xl mx-auto bg-white p-8 rounded-2xl shadow-lg border border-gray-300">
    <h1 class="text-2xl font-bold text-center text-gray-800 mb-6">Editar Proveedor</h1>

    <% if (typeof errores !=='undefined' && errores.length> 0) { %>
      <div class="bg-red-50 border border-red-300 text-red-800 px-5 py-4 rounded-lg mb-6 shadow-sm">
        <h2 class="font-semibold mb-2">Por favor corregí los siguientes errores:</h2>
        <ul class="list-disc pl-6 text-sm space-y-1">
          <% errores.forEach(error=> { %>
            <li><%= error.msg %></li>
          <% }) %>
        </ul>
      </div>
    <% } %>

    <form action="/proveedores/<%= proveedor._id %>/editar" method="POST" class="space-y-6">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label class="block text-sm font-medium text-gray-700">Número de proveedor</label>
          <input type="text" value="<%= proveedor.numeroProveedor %>" disabled
                 class="w-full border px-3 py-2 rounded-lg text-sm bg-gray-100 text-gray-600" />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Nombre de fantasía</label>
          <input type="text" name="nombreFantasia" value="<%= proveedor.nombreFantasia %>"
                 class="w-full border px-3 py-2 rounded-lg text-sm border-gray-300" required />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Nombre real</label>
          <input type="text" name="nombreReal" value="<%= proveedor.nombreReal %>"
                 class="w-full border px-3 py-2 rounded-lg text-sm border-gray-300" required />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">CUIT</label>
          <input type="text" name="cuit" value="<%= proveedor.cuit %>"
                 class="w-full border px-3 py-2 rounded-lg text-sm border-gray-300" required />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Domicilio</label>
          <input type="text" name="domicilio" value="<%= proveedor.domicilio %>"
                 class="w-full border px-3 py-2 rounded-lg text-sm border-gray-300" required />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Domicilio Fiscal</label>
          <input type="text" name="domicilioFiscal" value="<%= proveedor.domicilioFiscal %>"
                 class="w-full border px-3 py-2 rounded-lg text-sm border-gray-300" required />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Teléfono celular</label>
          <input type="text" name="telefonoCelular" value="<%= proveedor.telefonoCelular %>"
                 class="w-full border px-3 py-2 rounded-lg text-sm border-gray-300" />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Teléfono fijo</label>
          <input type="text" name="telefonoFijo" value="<%= proveedor.telefonoFijo %>"
                 class="w-full border px-3 py-2 rounded-lg text-sm border-gray-300" />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">E-mail</label>
          <input type="email" name="email" value="<%= proveedor.email %>"
                 class="w-full border px-3 py-2 rounded-lg text-sm border-gray-300" />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">CBU</label>
          <input type="text" name="cbu" value="<%= proveedor.cbu %>"
                 class="w-full border px-3 py-2 rounded-lg text-sm border-gray-300" />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Categoría</label>
          <input type="text" name="categoria" value="<%= proveedor.categoria %>"
                 class="w-full border px-3 py-2 rounded-lg text-sm border-gray-300" required />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Condición IVA</label>
          <select name="condicionIva" required class="w-full border px-3 py-2 rounded-lg text-sm border-gray-300">
            <option value="">Seleccione una opción</option>
            <% const opciones=["Responsable Inscripto", "Monotributo" , "Exento" , "Consumidor Final" , "Otro" ]; %>
            <% opciones.forEach(op=> { %>
              <option value="<%= op %>" <%= proveedor.condicionIva===op ? "selected" : "" %>><%= op %></option>
            <% }) %>
          </select>
        </div>

        <!-- Plan -->
        <div class="md:col-span-2">
          <label class="block text-sm font-medium text-gray-700">Plan</label>
          <select name="plan" class="w-full border px-3 py-2 rounded-lg text-sm border-gray-300">
            <option value="">— Sin plan —</option>
            <% (planes || []).forEach(p => { %>
              <option value="<%= p._id %>"
                <%= (String(proveedor?.plan?._id || proveedor?.plan || '') === String(p._id)) ? "selected" : "" %>>
                <%= p.nombre %> — $ <%= Number(p.importe || 0).toLocaleString("es-AR", { minimumFractionDigits: 2 }) %>
              </option>
            <% }) %>
          </select>
          <p class="text-xs text-gray-500 mt-1">Si no elegís plan, el proveedor queda sin plan asignado.</p>
        </div>

        <!-- Precio override del plan con máscara -->
        <div class="md:col-span-1">
          <label class="block text-sm font-medium text-gray-700">Precio del plan (override)</label>
          <div class="relative">
            <span class="absolute inset-y-0 left-3 flex items-center pointer-events-none text-gray-500">$</span>
            <input type="text" id="precioMask" inputmode="numeric" autocomplete="off"
                   class="w-full border border-gray-300 pl-7 pr-3 py-2 rounded-lg text-sm"
                   placeholder="0,00">
          </div>
          <input type="hidden" name="precioPlan" id="precioHidden"
                 value="<%= (typeof proveedor?.precioPlan === 'number') ? Number(proveedor.precioPlan).toFixed(2) : '' %>">
          <p class="text-xs text-gray-500 mt-1">Dejalo vacío para usar el importe del Plan.</p>
        </div>

        <!-- Activo -->
        <div class="sm:col-span-2 flex items-center gap-2 mt-2">
          <input id="chk-activo" type="checkbox" name="activo" value="true" <%= (proveedor.activo ?? true) ? 'checked' : '' %> >
          <label for="chk-activo" class="text-gray-700">Activo</label>
        </div>
      </div>

      <div class="text-center">
        <button type="submit" class="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-800 transition">
          Guardar cambios
        </button>
      </div>
    </form>
  </div>
</main>

<script>
/* Capitalización y restricciones numéricas */
(function(){
  const camposTexto = ["nombreFantasia","nombreReal","domicilio","domicilioFiscal","categoria"];
  camposTexto.forEach(name => {
    const input = document.querySelector(`input[name="${name}"]`);
    if (input) input.addEventListener("blur", () => {
      // Capitaliza primera letra de cada palabra
      input.value = input.value.toLowerCase().replace(/(^\w|\s\w)/g, l => l.toUpperCase());
    });
  });
  const restricciones = { cuit:11, telefonoCelular:10, telefonoFijo:10, cbu:22 };
  Object.entries(restricciones).forEach(([campo, max]) => {
    const input = document.querySelector(`input[name="${campo}"]`);
    if (input) input.addEventListener("input", () => {
      input.value = input.value.replace(/\D/g, "").slice(0, max);
    });
  });
})();

/* Máscara ARS para precioPlan (coma decimal, 2 decimales, $ visible) */
(() => {
  const input = document.getElementById('precioMask');
  const hidden = document.getElementById('precioHidden');

  let intDigits = "";           // parte entera
  let decDigits = ["0","0"];    // dos decimales
  let editingDecimals = false;  // modo decimales
  let decPos = 0;

  // init desde hidden
  (function init() {
    const v = hidden.value;
    if (!v) { render(); return; }
    const n = Number(v);
    if (Number.isFinite(n)) {
      const entero = Math.trunc(Math.abs(n)).toString();
      const dec = Math.round((Math.abs(n) % 1) * 100).toString().padStart(2, "0");
      intDigits = entero.replace(/^0+(?=\d)/, '');
      decDigits = [dec[0], dec[1]];
    }
    render();
  })();

  function fmtMiles(s) {
    s = s || "0";
    s = s.replace(/^0+(?=\d)/, "");
    if (s === "") s = "0";
    return s.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
  }
  function updateHidden() {
    const num = Number(intDigits || "0") + (Number(decDigits.join("")) / 100);
    hidden.value = num.toFixed(2);
  }
  function render() {
    const visible = `${fmtMiles(intDigits)},${decDigits.join("")}`;
    input.value = visible;
    requestAnimationFrame(() => {
      const commaIndex = visible.indexOf(",");
      let pos = editingDecimals ? (commaIndex + 1 + decPos) : commaIndex;
      pos = Math.max(0, Math.min(visible.length, pos));
      input.setSelectionRange(pos, pos);
    });
    updateHidden();
  }
  function parseAnyNumberLike(str) {
    let s = (str || "").trim();
    if (!s) return null;
    const lastComma = s.lastIndexOf(',');
    const lastDot = s.lastIndexOf('.');
    let decSep = null;
    if (lastComma > -1 || lastDot > -1) decSep = (lastComma > lastDot) ? ',' : '.';
    if (decSep === ',') { s = s.replace(/\./g, ''); s = s.replace(',', '.'); }
    else if (decSep === '.') { s = s.replace(/,/g, ''); }
    else { s = s.replace(/[.,\s]/g, ''); }
    const n = Number(s);
    return Number.isFinite(n) && n >= 0 ? n : null;
  }

  input.addEventListener('beforeinput', (e) => {
    const type = e.inputType;
    const data = e.data;

    if (type === 'insertText' && /[0-9]/.test(data || "")) {
      if (editingDecimals) {
        if (decPos < 2) { decDigits[decPos] = data; decPos++; }
        else { decPos = 0; decDigits[decPos] = data; decPos = 1; }
      } else {
        intDigits += data;
        intDigits = intDigits.replace(/^0+(?=\d)/, '');
      }
      e.preventDefault(); render(); return;
    }

    if (type === 'insertText' && (data === '.' || data === ',')) {
      editingDecimals = true; decPos = 0;
      e.preventDefault(); render(); return;
    }

    if (type === 'deleteContentBackward') {
      e.preventDefault();
      if (editingDecimals) {
        if (decPos > 0) { decPos--; decDigits[decPos] = "0"; }
        else { editingDecimals = false; }
      } else {
        if (intDigits.length > 0) intDigits = intDigits.slice(0, -1);
      }
      render(); return;
    }

    if (type === 'insertFromPaste') {
      e.preventDefault();
      navigator.clipboard.readText().then(text => {
        const n = parseAnyNumberLike(text);
        if (n === null) return;
        const entero = Math.trunc(n).toString();
        const dec = Math.round((n % 1) * 100).toString().padStart(2, "0");
        intDigits = entero.replace(/^0+(?=\d)/, '');
        decDigits = [dec[0], dec[1]];
        editingDecimals = false; decPos = 0;
        render();
      }).catch(() => {});
      return;
    }

    e.preventDefault(); // bloquear lo demás
  });

  input.addEventListener('click', () => {
    const visible = input.value;
    const commaIndex = visible.indexOf(",");
    const caret = input.selectionStart || 0;
    const isInitialZero = (fmtMiles(intDigits) === "0" && decDigits.join("") === "00");
    if (isInitialZero) { editingDecimals = false; decPos = 0; render(); return; }
    if (caret > commaIndex) {
      editingDecimals = true;
      const after = caret - (commaIndex + 1);
      decPos = Math.max(0, Math.min(2, after));
      if (decPos >= 2) decPos = 1;
    } else {
      editingDecimals = false; decPos = 0;
    }
    render();
  });

  input.addEventListener('focus', () => {
    if (!input.value) { editingDecimals = false; decPos = 0; render(); }
    else { input.dispatchEvent(new Event('click')); }
  });

  input.addEventListener('keypress', (e) => {
    const ch = e.key;
    if (!/[0-9.,]/.test(ch)) e.preventDefault();
  });
})();
</script>